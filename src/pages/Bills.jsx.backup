import React, { useState, useEffect } from 'react'
import { apiClient } from '../api/client'
import { 
  Plus, 
  Receipt, 
  Clock, 
  CheckCircle, 
  AlertTriangle,
  Zap,
  Home,
  Shield,
  Wifi,
  CreditCard,
  Car,
  Calendar,
  Edit,
  Trash2,
  Search,
  Filter,
  DollarSign
} from 'lucide-react'
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from 'recharts'

const Bills = () => {
  const [billData, setBillData] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [showAddForm, setShowAddForm] = useState(false)
  const [editingBill, setEditingBill] = useState(null)
  const [showEditForm, setShowEditForm] = useState(false)
  const [activeTab, setActiveTab] = useState('Personal')
  const [formData, setFormData] = useState({
    name: '',
    category: 'utilities',
    amount: '',
    due_date: '',
    frequency: 'monthly',
    auto_pay: false,
    status: 'pending',
    is_recurring: true,
    notes: '',
    owner: 'Personal'
  })

  const billCategories = [
    { value: 'utilities', label: 'Utilities', icon: Zap, color: 'yellow' },
    { value: 'insurance', label: 'Insurance', icon: Shield, color: 'blue' },
    { value: 'subscription', label: 'Subscriptions', icon: Wifi, color: 'purple' },
    { value: 'streaming', label: 'Streaming', icon: Wifi, color: 'purple' },
    { value: 'phone', label: 'Phone', icon: Wifi, color: 'blue' },
    { value: 'internet', label: 'Internet', icon: Wifi, color: 'teal' },
    { value: 'rent', label: 'Rent', icon: Home, color: 'emerald' },
    { value: 'mortgage', label: 'Mortgage', icon: Home, color: 'emerald' },
    { value: 'other', label: 'Other', icon: Receipt, color: 'slate' }
  ]

  const frequencies = [
    { value: 'weekly', label: 'Weekly' },
    { value: 'bi-weekly', label: 'Bi-weekly' },
    { value: 'monthly', label: 'Monthly' },
    { value: 'quarterly', label: 'Quarterly' },
    { value: 'yearly', label: 'Yearly' }
  ]

  const paymentMethods = [
    { value: 'cash', label: 'Cash' },
    { value: 'credit_card', label: 'Credit Card' },
    { value: 'debit_card', label: 'Debit Card' },
    { value: 'bank_transfer', label: 'Bank Transfer' },
    { value: 'check', label: 'Check' }
  ]

  useEffect(() => {
    loadBillData()
  }, [])

  const loadBillData = async () => {
    try {
      setLoading(true)
      const response = await apiClient.getBills()
      if (response.success) {
        setBillData(response.data)
        setError(null)
      } else {
        setError('Failed to load bill data')
      }
    } catch (err) {
      console.error('Error loading bill data:', err)
      setError('Failed to connect to backend. Please ensure the server is running.')
    } finally {
      setLoading(false)
    }
  }

  const getFilteredBillData = () => {
    if (activeTab === 'Family') {
      return billData
    }
    return billData.filter(bill => bill.owner === activeTab || !bill.owner)
  }

  const handleAddBill = async (e) => {
    e.preventDefault()
    try {
      const billDataToSend = {
        ...formData,
        amount: parseFloat(formData.amount),
        due_date: formData.due_date
      }
      
      const response = await apiClient.createBill(billDataToSend)
      if (response.success) {
        await loadBillData()
        setFormData({
          name: '',
          category: 'utilities',
          amount: '',
          due_date: '',
          frequency: 'monthly',
          auto_pay: false,
          status: 'pending',
          is_recurring: true,
          notes: '',
          owner: 'Personal'
        })
        setShowAddForm(false)
        setError(null)
      } else {
        setError('Failed to add bill record')
      }
    } catch (err) {
      console.error('Error adding bill:', err)
      setError('Failed to add bill record')
    }
  }

  const handlePayBill = async (billId, paymentMethod) => {
    try {
      const response = await apiClient.payBill(billId, { 
        payment_method: paymentMethod,
        payment_date: new Date().toISOString().split('T')[0]
      })
      if (response.success) {
        await loadBillData()
        setError(null)
      } else {
        setError('Failed to mark bill as paid')
      }
    } catch (err) {
      console.error('Error paying bill:', err)
      setError('Failed to mark bill as paid')
    }
  }

  const getCategoryInfo = (category) => {
    return billCategories.find(cat => cat.value === category) || billCategories[0]
  }

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount)
  }

  const getDaysUntilDue = (dueDate) => {
    const today = new Date()
    const due = new Date(dueDate)
    const diffTime = due - today
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
    return diffDays
  }

  const getBillStatus = (bill) => {
    if (bill.status === 'paid') return 'paid'
    const daysUntil = getDaysUntilDue(bill.due_date)
    if (daysUntil < 0) return 'overdue'
    if (daysUntil <= 3) return 'due_soon'
    return 'upcoming'
  }

  const getStatusColor = (status) => {
    switch (status) {
      case 'paid': return 'emerald'
      case 'overdue': return 'red'
      case 'due_soon': return 'yellow'
      default: return 'blue'
    }
  }

  const getStatusIcon = (status) => {
    switch (status) {
      case 'paid': return CheckCircle
      case 'overdue': return AlertTriangle
      case 'due_soon': return Clock
      default: return Calendar
    }
  }

  const calculateTotalMonthly = () => {
    const filteredData = getFilteredBillData()
    return filteredData.reduce((total, bill) => {
      let monthlyAmount = bill.amount
      switch (bill.frequency) {
        case 'weekly': monthlyAmount = bill.amount * 4.33; break
        case 'bi-weekly': monthlyAmount = bill.amount * 2.17; break
        case 'quarterly': monthlyAmount = bill.amount / 3; break
        case 'yearly': monthlyAmount = bill.amount / 12; break
        default: monthlyAmount = bill.amount
      }
      return total + monthlyAmount
    }, 0)
  }

  const calculateMonthlyAmount = (amount, frequency) => {
    switch (frequency) {
      case 'weekly': return amount * 4.33
      case 'bi-weekly': return amount * 2.17
      case 'quarterly': return amount / 3
      case 'yearly': return amount / 12
      default: return amount
    }
  }

  const handleDeleteBill = async (id) => {
    if (window.confirm('Are you sure you want to delete this bill?')) {
      try {
        const response = await apiClient.deleteBill(id)
        if (response.success) {
          await loadBillData()
          setError(null)
        } else {
          setError('Failed to delete bill')
        }
      } catch (err) {
        console.error('Error deleting bill:', err)
        setError('Failed to delete bill')
      }
    }
  }

  const handleEditBill = (bill) => {
    setEditingBill(bill)
    setFormData({
      name: bill.name,
      category: bill.category,
      amount: bill.amount.toString(),
      due_date: bill.due_date,
      frequency: bill.frequency,
      auto_pay: bill.auto_pay,
      status: bill.status,
      is_recurring: bill.is_recurring,
      notes: bill.notes || '',
      owner: bill.owner || 'Personal'
    })
    setShowEditForm(true)
  }

  const handleUpdateBill = async (e) => {
    e.preventDefault()
    try {
      const billDataToSend = {
        ...formData,
        amount: parseFloat(formData.amount),
        due_date: formData.due_date
      }
      
      const response = await apiClient.updateBill(editingBill.id, billDataToSend)
      if (response.success) {
        await loadBillData()
        setFormData({
          name: '',
          category: 'utilities',
          amount: '',
          due_date: '',
          frequency: 'monthly',
          auto_pay: false,
          status: 'pending',
          is_recurring: true,
          notes: '',
          owner: 'Personal'
        })
        setShowEditForm(false)
        setEditingBill(null)
        setError(null)
      } else {
        setError('Failed to update bill record')
      }
    } catch (err) {
      console.error('Error updating bill:', err)
      setError('Failed to update bill record')
    }
  }

  const resetForm = () => {
    setFormData({
      name: '',
      category: 'utilities',
      amount: '',
      due_date: '',
      frequency: 'monthly',
      auto_pay: false,
      status: 'pending',
      is_recurring: true,
      notes: '',
      owner: 'Personal'
    })
    setShowAddForm(false)
    setShowEditForm(false)
    setEditingBill(null)
  }

  const getOverdueBills = () => {
    return billData.filter(bill => bill.status !== 'paid' && getDaysUntilDue(bill.due_date) < 0)
  }

  const getUpcomingBills = () => {
    return billData.filter(bill => bill.status !== 'paid' && getDaysUntilDue(bill.due_date) >= 0)
  }

  const getBillsChartData = () => {
    const filteredData = getFilteredBillData()
    const categoryData = {}
    
    filteredData.forEach(bill => {
      const monthlyAmount = calculateMonthlyAmount(bill.amount, bill.frequency)
      if (categoryData[bill.category]) {
        categoryData[bill.category] += monthlyAmount
      } else {
        categoryData[bill.category] = monthlyAmount
      }
    })

    return Object.entries(categoryData).map(([category, amount]) => ({
      name: billCategories.find(cat => cat.value === category)?.label || category,
      value: amount,
      color: `#${Math.floor(Math.random()*16777215).toString(16)}`
    }))
  }

  const getBillsStatusData = () => {
    const filteredData = getFilteredBillData()
    const statusCounts = {
      paid: 0,
      pending: 0,
      overdue: 0,
      due_soon: 0
    }

    filteredData.forEach(bill => {
      const status = getBillStatus(bill)
      if (statusCounts.hasOwnProperty(status)) {
        statusCounts[status]++
      }
    })

    return [
      { name: 'Paid', value: statusCounts.paid, color: '#10b981' },
      { name: 'Pending', value: statusCounts.pending, color: '#3b82f6' },
      { name: 'Due Soon', value: statusCounts.due_soon, color: '#f59e0b' },
      { name: 'Overdue', value: statusCounts.overdue, color: '#ef4444' }
    ].filter(item => item.value > 0)
  }

  const getUpcomingBillsData = () => {
    const upcoming = getUpcomingBills()
      .sort((a, b) => new Date(a.due_date) - new Date(b.due_date))
      .slice(0, 10)
    
    return upcoming.map(bill => ({
      name: bill.name.length > 15 ? bill.name.substring(0, 15) + '...' : bill.name,
      amount: calculateMonthlyAmount(bill.amount, bill.frequency),
      daysUntil: getDaysUntilDue(bill.due_date),
      category: bill.category
    }))
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-slate-600">Loading bills data...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-slate-900 dark:text-cyan-100">Bills Management</h1>
          <p className="text-slate-600 dark:text-cyan-300 mt-1">Track due dates and payment status</p>
        </div>
        <button
          onClick={() => setShowAddForm(true)}
          className="flex items-center gap-2 px-4 py-2 bg-blue-600 dark:bg-blue-700 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-800 transition-colors"
        >
          <Plus className="w-5 h-5" />
          Add Bill
        </button>
      </div>

      {/* Tabs */}
      <div className="flex items-center gap-1 bg-slate-100 dark:bg-gray-800/50 p-1 rounded-lg w-fit">
        {['Personal', 'Spouse', 'Family'].map((tab) => (
          <button
            key={tab}
            onClick={() => setActiveTab(tab)}
            className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
              activeTab === tab
                ? 'bg-white dark:bg-gray-700 text-slate-900 dark:text-cyan-100 shadow-sm'
                : 'text-slate-600 dark:text-cyan-300 hover:text-slate-900 dark:hover:text-white'
            }`}
          >
            {tab}
          </button>
        ))}
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="metric-card-blue">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-blue-600">Monthly Total</p>
              <p className="text-2xl font-bold text-slate-900 mt-1">
                {formatCurrency(calculateTotalMonthly())}
              </p>
            </div>
            <div className="p-3 bg-blue-100 rounded-full">
              <DollarSign className="w-6 h-6 text-blue-600" />
            </div>
          </div>
        </div>

        <div className="metric-card-emerald">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-emerald-600">Paid Bills</p>
              <p className="text-2xl font-bold text-slate-900 mt-1">
                {getFilteredBillData().filter(bill => bill.status === 'paid').length}
              </p>
            </div>
            <div className="p-3 bg-emerald-100 rounded-full">
              <CheckCircle className="w-6 h-6 text-emerald-600" />
            </div>
          </div>
        </div>

        <div className="metric-card-slate">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-slate-600">Upcoming</p>
              <p className="text-2xl font-bold text-slate-900 mt-1">
                {getUpcomingBills().length}
              </p>
            </div>
            <div className="p-3 bg-slate-100 rounded-full">
              <Clock className="w-6 h-6 text-slate-600" />
            </div>
          </div>
        </div>

        <div className="metric-card-slate">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-red-600">Overdue</p>
              <p className="text-2xl font-bold text-slate-900 mt-1">
                {getOverdueBills().length}
              </p>
            </div>
            <div className="p-3 bg-red-100 rounded-full">
              <AlertTriangle className="w-6 h-6 text-red-600" />
            </div>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="flex items-center gap-4 p-4 bg-slate-50 dark:bg-gray-800/50 rounded-lg border border-slate-200 dark:border-gray-700/50">
        <div className="flex items-center gap-2 flex-1">
          <Search className="w-5 h-5 text-slate-400 dark:text-gray-400" />
          <input
            type="text"
            placeholder="Search bills..."
            className="flex-1 bg-transparent border-none outline-none text-slate-900 dark:text-cyan-100 placeholder-slate-500 dark:placeholder-gray-400"
          />
        </div>
        <button className="flex items-center gap-2 px-3 py-2 text-slate-600 dark:text-cyan-300 hover:text-slate-900 dark:hover:text-white transition-colors">
          <Filter className="w-4 h-4" />
          Filters
        </button>
      </div>

      {/* Charts Section */}
      {billData.length > 0 && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Bills by Category Pie Chart */}
          <div className="bg-white dark:bg-gray-800/80 rounded-xl shadow-md border border-slate-200 dark:border-gray-700/50 p-6">
            <h3 className="text-lg font-semibold text-slate-900 dark:text-cyan-100 mb-4">Bills by Category</h3>
            <ResponsiveContainer width="100%" height={200}>
              <PieChart>
                <Pie
                  data={getBillsChartData()}
                  cx="50%"
                  cy="50%"
                  innerRadius={40}
                  outerRadius={80}
                  paddingAngle={5}
                  dataKey="value"
                >
                  {getBillsChartData().map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip formatter={(value) => formatCurrency(value)} />
              </PieChart>
            </ResponsiveContainer>
          </div>

          {/* Payment Status */}
          <div className="bg-white dark:bg-gray-800/80 rounded-xl shadow-md border border-slate-200 dark:border-gray-700/50 p-6">
            <h3 className="text-lg font-semibold text-slate-900 dark:text-cyan-100 mb-4">Payment Status</h3>
            <ResponsiveContainer width="100%" height={200}>
              <PieChart>
                <Pie
                  data={getBillsStatusData()}
                  cx="50%"
                  cy="50%"
                  outerRadius={80}
                  dataKey="value"
                >
                  {getBillsStatusData().map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>

          {/* Upcoming Bills Timeline */}
          <div className="bg-white dark:bg-gray-800/80 rounded-xl shadow-md border border-slate-200 dark:border-gray-700/50 p-6">
            <h3 className="text-lg font-semibold text-slate-900 dark:text-cyan-100 mb-4">Upcoming Bills</h3>
            <ResponsiveContainer width="100%" height={200}>
              <BarChart data={getUpcomingBillsData()}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" angle={-45} textAnchor="end" height={80} fontSize={10} />
                <YAxis formatter={(value) => `$${value}`} fontSize={12} />
                <Tooltip formatter={(value) => [formatCurrency(value), 'Amount']} />
                <Bar dataKey="amount" fill="#3b82f6" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
      )}

      {/* Bills Table */
      <div className="bg-white dark:bg-gray-800/80 rounded-xl shadow-md border border-slate-200 dark:border-gray-700/50 overflow-hidden backdrop-blur-sm">
        <div className="p-6 border-b border-slate-200 dark:border-gray-700/50">
          <h2 className="text-xl font-semibold text-slate-900 dark:text-cyan-100">Bill Payments</h2>
          <p className="text-slate-600 dark:text-cyan-300 text-sm mt-1">Track payment status and due dates with monthly subtotals</p>
        </div>

        {billData.length === 0 ? (
          <div className="text-center py-12">
            <Receipt className="w-16 h-16 text-slate-300 dark:text-gray-500 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-slate-900 dark:text-cyan-100 mb-2">No Bills Found</h3>
            <p className="text-slate-600 dark:text-cyan-300">Add your first bill to get started with payment tracking.</p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-slate-50 dark:bg-gray-700/50 border-b border-slate-200 dark:border-gray-600/50">
                <tr>
                  <th className="text-left p-4 font-semibold text-slate-900 dark:text-cyan-100">Bill Name</th>
                  <th className="text-left p-4 font-semibold text-slate-900 dark:text-cyan-100">Category</th>
                  <th className="text-left p-4 font-semibold text-slate-900 dark:text-cyan-100">Frequency</th>
                  <th className="text-right p-4 font-semibold text-slate-900 dark:text-cyan-100">Amount</th>
                  <th className="text-right p-4 font-semibold text-slate-900 dark:text-cyan-100">Monthly</th>
                  <th className="text-left p-4 font-semibold text-slate-900 dark:text-cyan-100">Due Date</th>
                  <th className="text-left p-4 font-semibold text-slate-900 dark:text-cyan-100">Status</th>
                  <th className="text-left p-4 font-semibold text-slate-900 dark:text-cyan-100">Actions</th>
                </tr>
              </thead>
              <tbody>
                {getFilteredBillData().map((bill) => {
                  const categoryInfo = getCategoryInfo(bill.category)
                  const CategoryIcon = categoryInfo.icon
                  const status = getBillStatus(bill)
                  const statusColor = getStatusColor(status)
                  const StatusIcon = getStatusIcon(status)
                  const daysUntil = getDaysUntilDue(bill.due_date)
                  const monthlyAmount = calculateMonthlyAmount(bill.amount, bill.frequency)
                  
                  return (
                    <tr key={bill.id} className="border-b border-slate-100 dark:border-gray-700/30 hover:bg-slate-50 dark:hover:bg-gray-700/30">
                      <td className="p-4">
                        <div className="flex items-center gap-3">
                          <div className={`p-2 bg-${categoryInfo.color}-100 dark:bg-${categoryInfo.color}-900/30 rounded-lg`}>
                            <CategoryIcon className={`w-5 h-5 text-${categoryInfo.color}-600 dark:text-${categoryInfo.color}-400`} />
                          </div>
                          <div>
                            <div className="font-semibold text-slate-900 dark:text-cyan-100">{bill.name}</div>
                            {bill.notes && (
                              <div className="text-sm text-slate-600 dark:text-cyan-300 truncate max-w-[200px]">
                                {bill.notes}
                              </div>
                            )}
                          </div>
                        </div>
                      </td>
                      
                      <td className="p-4">
                        <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full bg-${categoryInfo.color}-100 dark:bg-${categoryInfo.color}-900/30 text-${categoryInfo.color}-700 dark:text-${categoryInfo.color}-300`}>
                          {categoryInfo.label}
                        </span>
                      </td>
                      
                      <td className="p-4">
                        <span className="inline-flex px-2 py-1 text-xs font-medium rounded-full bg-slate-100 dark:bg-gray-700 text-slate-700 dark:text-gray-300">
                          {frequencies.find(f => f.value === bill.frequency)?.label}
                        </span>
                      </td>
                      
                      <td className="p-4 text-right">
                        <div className="font-bold text-slate-900 dark:text-cyan-100">
                          {formatCurrency(bill.amount)}
                        </div>
                        <div className="text-sm text-slate-500 dark:text-gray-400 capitalize">
                          per {bill.frequency === 'bi-weekly' ? 'bi-week' : bill.frequency}
                        </div>
                      </td>
                      
                      <td className="p-4 text-right">
                        <div className="font-bold text-blue-600 dark:text-blue-400">
                          {formatCurrency(monthlyAmount)}
                        </div>
                        <div className="text-sm text-slate-500 dark:text-gray-400">
                          monthly equiv.
                        </div>
                      </td>
                      
                      <td className="p-4">
                        <div className="flex items-center gap-2">
                          <Calendar className="w-4 h-4 text-slate-400 dark:text-gray-400" />
                          <div>
                            <span className="text-sm text-slate-600 dark:text-cyan-300">
                              {new Date(bill.due_date).toLocaleDateString()}
                            </span>
                            {bill.status !== 'paid' && (
                              <div className={`text-xs font-medium ${daysUntil < 0 ? 'text-red-600 dark:text-red-400' : daysUntil <= 3 ? 'text-yellow-600 dark:text-yellow-400' : 'text-slate-600 dark:text-gray-400'}`}>
                                {daysUntil < 0 ? `${Math.abs(daysUntil)} days overdue` : 
                                 daysUntil === 0 ? 'Due today' :
                                 `${daysUntil} days left`}
                              </div>
                            )}
                          </div>
                        </div>
                      </td>
                      
                      <td className="p-4">
                        <div className="flex flex-col gap-1">
                          <span className={`inline-flex items-center gap-1 px-2 py-1 text-xs font-medium rounded-full bg-${statusColor}-100 dark:bg-${statusColor}-900/30 text-${statusColor}-700 dark:text-${statusColor}-300`}>
                            <StatusIcon className="w-3 h-3" />
                            {status.replace('_', ' ').charAt(0).toUpperCase() + status.replace('_', ' ').slice(1)}
                          </span>
                          {bill.auto_pay && (
                            <span className="inline-flex px-2 py-1 text-xs bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 rounded">
                              Auto-pay
                            </span>
                          )}
                        </div>
                      </td>
                      
                      <td className="p-4">
                        <div className="flex items-center gap-1">
                          {bill.status !== 'paid' && (
                            <button 
                              onClick={() => handlePayBill(bill.id, 'bank_transfer')}
                              className="px-2 py-1 bg-emerald-600 dark:bg-emerald-700 text-white text-xs rounded hover:bg-emerald-700 dark:hover:bg-emerald-800 transition-colors"
                            >
                              Pay
                            </button>
                          )}
                          <button 
                            onClick={() => handleEditBill(bill)}
                            className="p-2 text-slate-400 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors rounded-lg hover:bg-blue-50 dark:hover:bg-blue-900/20"
                          >
                            <Edit className="w-4 h-4" />
                          </button>
                          <button 
                            onClick={() => handleDeleteBill(bill.id)}
                            className="p-2 text-slate-400 dark:text-gray-400 hover:text-red-600 dark:hover:text-red-400 transition-colors rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20"
                          >
                            <Trash2 className="w-4 h-4" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  )
                })}
                
                {/* Subtotal Row */}
                <tr className="bg-slate-50 dark:bg-gray-700/50 border-t-2 border-slate-300 dark:border-gray-600 font-semibold">
                  <td colSpan="4" className="p-4 text-right text-slate-900 dark:text-cyan-100">
                    Total Monthly Bills:
                  </td>
                  <td className="p-4 text-right text-blue-600 dark:text-blue-400 font-bold text-lg">
                    {formatCurrency(calculateTotalMonthly())}
                  </td>
                  <td colSpan="3" className="p-4 text-slate-600 dark:text-cyan-300 text-sm">
                    {billData.length} {billData.length === 1 ? 'bill' : 'bills'} • {getOverdueBills().length} overdue • {getUpcomingBills().length} upcoming
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        )}
      </div>

      {showEditForm && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-slate-200">
              <h2 className="text-xl font-semibold text-slate-900">Edit Bill</h2>
            </div>
            
            <form onSubmit={handleUpdateBill} className="p-6 space-y-4">
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Bill Name
                </label>
                <input
                  type="text"
                  required
                  value={formData.name}
                  onChange={(e) => setFormData({...formData, name: e.target.value})}
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., Electric Bill, Netflix, Rent"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Category
                  </label>
                  <select
                    value={formData.category}
                    onChange={(e) => setFormData({...formData, category: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    {billCategories.map(cat => (
                      <option key={cat.value} value={cat.value}>{cat.label}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Frequency
                  </label>
                  <select
                    value={formData.frequency}
                    onChange={(e) => setFormData({...formData, frequency: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    {frequencies.map(freq => (
                      <option key={freq.value} value={freq.value}>{freq.label}</option>
                    ))}
                  </select>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Amount
                  </label>
                  <input
                    type="number"
                    required
                    min="0"
                    step="0.01"
                    value={formData.amount}
                    onChange={(e) => setFormData({...formData, amount: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="0.00"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Due Date
                  </label>
                  <input
                    type="date"
                    required
                    value={formData.due_date}
                    onChange={(e) => setFormData({...formData, due_date: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Notes (Optional)
                </label>
                <textarea
                  value={formData.notes}
                  onChange={(e) => setFormData({...formData, notes: e.target.value})}
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  rows="3"
                  placeholder="Additional notes about this bill..."
                />
              </div>

              <div className="flex items-center gap-2">
                <input
                  type="checkbox"
                  id="edit_auto_pay"
                  checked={formData.auto_pay}
                  onChange={(e) => setFormData({...formData, auto_pay: e.target.checked})}
                  className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <label htmlFor="edit_auto_pay" className="text-sm text-slate-700">
                  This bill has auto-pay enabled
                </label>
              </div>

              <div className="flex gap-3 pt-4">
                <button
                  type="button"
                  onClick={resetForm}
                  className="flex-1 px-4 py-2 border border-slate-300 text-slate-700 rounded-lg hover:bg-slate-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Update Bill
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {showAddForm && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-slate-200">
              <h2 className="text-xl font-semibold text-slate-900">Add New Bill</h2>
            </div>
            
            <form onSubmit={handleAddBill} className="p-6 space-y-4">
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Bill Name
                </label>
                <input
                  type="text"
                  required
                  value={formData.name}
                  onChange={(e) => setFormData({...formData, name: e.target.value})}
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., Electric Bill, Netflix, Rent"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Category
                  </label>
                  <select
                    value={formData.category}
                    onChange={(e) => setFormData({...formData, category: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    {billCategories.map(cat => (
                      <option key={cat.value} value={cat.value}>{cat.label}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Frequency
                  </label>
                  <select
                    value={formData.frequency}
                    onChange={(e) => setFormData({...formData, frequency: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    {frequencies.map(freq => (
                      <option key={freq.value} value={freq.value}>{freq.label}</option>
                    ))}
                  </select>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Amount
                  </label>
                  <input
                    type="number"
                    required
                    min="0"
                    step="0.01"
                    value={formData.amount}
                    onChange={(e) => setFormData({...formData, amount: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="0.00"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Due Date
                  </label>
                  <input
                    type="date"
                    required
                    value={formData.due_date}
                    onChange={(e) => setFormData({...formData, due_date: e.target.value})}
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Notes (Optional)
                </label>
                <textarea
                  value={formData.notes}
                  onChange={(e) => setFormData({...formData, notes: e.target.value})}
                  className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  rows="3"
                  placeholder="Additional notes about this bill..."
                />
              </div>

              <div className="flex items-center gap-2">
                <input
                  type="checkbox"
                  id="auto_pay"
                  checked={formData.auto_pay}
                  onChange={(e) => setFormData({...formData, auto_pay: e.target.checked})}
                  className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <label htmlFor="auto_pay" className="text-sm text-slate-700">
                  This bill has auto-pay enabled
                </label>
              </div>

              <div className="flex gap-3 pt-4">
                <button
                  type="button"
                  onClick={resetForm}
                  className="flex-1 px-4 py-2 border border-slate-300 text-slate-700 rounded-lg hover:bg-slate-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Add Bill
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {error && (
        <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700/50 rounded-lg p-4">
          <p className="text-red-800 dark:text-red-300">{error}</p>
        </div>
      )}
    </div>
  )
}

export default Bills